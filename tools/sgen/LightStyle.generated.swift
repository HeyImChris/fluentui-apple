/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

public enum Theme: Int {
	case light
	case dark

	public var stylesheet: GenericStyle {
		switch self {
		case .light: return LightStyle.shared()
		case .dark: return DarkStyle.shared()
		}
	}
}

fileprivate var __ThemeHandle: UInt8 = 0

public extension StylesheetManager {
	static func currentTheme() -> GenericStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "theme"
	}

	 var theme: Theme {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeHandle) as? Theme else { return .light }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	func themeInit() {
		let theme: Theme = UserDefaults.standard[DefaultKeys.theme] ?? .light
		objc_setAssociatedObject(self, &__ThemeHandle, theme, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
	}
}

/// Entry point for the app stylesheet
public class LightStyle: GenericStyle {

	public override class func shared() -> LightStyle {
		 struct __ { static let _sharedInstance = LightStyle() }
		return __._sharedInstance
	}
	//MARK: - LightStyleActionSheet
	override open func ActionSheetStyle() -> GenericStyle.ActionSheetAppearanceProxy {
		if let override = _ActionSheet { return override }
			return LightStyleActionSheetAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleActionSheetAppearanceProxy: GenericStyle.ActionSheetAppearanceProxy {
	}
	//MARK: - LightStyleActionSheetButton
	override open func ActionSheetButtonStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy {
		if let override = _ActionSheetButton { return override }
			return LightStyleActionSheetButtonAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy {

		//MARK: - LightStylebackgroundColorActionSheetButton
		override open func backgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return LightStylebackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderColorActionSheetButton
		override open func borderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return LightStyleborderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderWidthActionSheetButton
		override open func borderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return LightStyleborderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.borderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStylecolorActionSheetButton
		override open func colorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecolorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.black.overlayProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
		}


		//MARK: contentAlignment 
		override open func contentAlignmentProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> S.ViewAlignment {
			if let override = _contentAlignment { return override }
			return S.ViewAlignment.leading
			}

		//MARK: - LightStylecontentEdgeInsetsActionSheetButton
		override open func contentEdgeInsetsStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {
			if let override = _contentEdgeInsets { return override }
				return LightStylecontentEdgeInsetsActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecontentEdgeInsetsActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {

			//MARK: icon 
			override open func iconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _icon { return override }
					return UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
				}

			//MARK: text 
			override open func textProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _text { return override }
					return UIEdgeInsets(top: 0.0, left: 5.0, bottom: 0.0, right: 5.0)
				}
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: - LightStyledestructiveBackgroundColorActionSheetButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return LightStyledestructiveBackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderColorActionSheetButton
		override open func destructiveBorderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return LightStyledestructiveBorderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderWidthActionSheetButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return LightStyledestructiveBorderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyledestructiveColorActionSheetButton
		override open func destructiveColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return LightStyledestructiveColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBackgroundColorActionSheetButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return LightStyleprimaryBackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderColorActionSheetButton
		override open func primaryBorderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return LightStyleprimaryBorderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderWidthActionSheetButton
		override open func primaryBorderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return LightStyleprimaryBorderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyleprimaryColorActionSheetButton
		override open func primaryColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return LightStyleprimaryColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.black.overlayProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
		}

	}
	//MARK: - LightStyleAlertController
	override open func AlertControllerStyle() -> GenericStyle.AlertControllerAppearanceProxy {
		if let override = _AlertController { return override }
			return LightStyleAlertControllerAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAlertControllerAppearanceProxy: GenericStyle.AlertControllerAppearanceProxy {
	}
	//MARK: - LightStyleAlertView
	override open func AlertViewStyle() -> GenericStyle.AlertViewAppearanceProxy {
		if let override = _AlertView { return override }
			return LightStyleAlertViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAlertViewAppearanceProxy: GenericStyle.AlertViewAppearanceProxy {
	}
	//MARK: - LightStyleAttachment
	override open func AttachmentStyle() -> GenericStyle.AttachmentAppearanceProxy {
		if let override = _Attachment { return override }
			return LightStyleAttachmentAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAttachmentAppearanceProxy: GenericStyle.AttachmentAppearanceProxy {

		//MARK: iconColor 
		override open func iconColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _iconColor { return override }
			return mainProxy().Color.brand.normalProperty(traitCollection)
			}

		//MARK: progressBarColor 
		override open func progressBarColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _progressBarColor { return override }
			return mainProxy().Color.brand.normalProperty(traitCollection)
			}
	}
	//MARK: - LightStyleAttributedLabel
	override open func AttributedLabelStyle() -> GenericStyle.AttributedLabelAppearanceProxy {
		if let override = _AttributedLabel { return override }
			return LightStyleAttributedLabelAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAttributedLabelAppearanceProxy: GenericStyle.AttributedLabelAppearanceProxy {
	}
	//MARK: - LightStyleAttributedRender
	override open func AttributedRenderStyle() -> GenericStyle.AttributedRenderAppearanceProxy {
		if let override = _AttributedRender { return override }
			return LightStyleAttributedRenderAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy {

		//MARK: - LightStylefontAttributedRender
		override open func fontStyle() -> GenericStyle.AttributedRenderAppearanceProxy.fontAppearanceProxy {
			if let override = _font { return override }
				return LightStylefontAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylefontAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.fontAppearanceProxy {
		}


		//MARK: - LightStylelinkAttributesTextColorAttributedRender
		override open func linkAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.linkAttributesTextColorAppearanceProxy {
			if let override = _linkAttributesTextColor { return override }
				return LightStylelinkAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelinkAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.linkAttributesTextColorAppearanceProxy {
		}


		//MARK: - LightStylementionAttributesTextColorAttributedRender
		override open func mentionAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.mentionAttributesTextColorAppearanceProxy {
			if let override = _mentionAttributesTextColor { return override }
				return LightStylementionAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylementionAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.mentionAttributesTextColorAppearanceProxy {
		}


		//MARK: - LightStylenameAttributesTextColorAttributedRender
		override open func nameAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.nameAttributesTextColorAppearanceProxy {
			if let override = _nameAttributesTextColor { return override }
				return LightStylenameAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylenameAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.nameAttributesTextColorAppearanceProxy {
		}


		//MARK: - LightStyletextColorAttributedRender
		override open func textColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return LightStyletextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.textColorAppearanceProxy {
		}


		//MARK: - LightStyletypeDetectedAttributesTextColorAttributedRender
		override open func typeDetectedAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.typeDetectedAttributesTextColorAppearanceProxy {
			if let override = _typeDetectedAttributesTextColor { return override }
				return LightStyletypeDetectedAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletypeDetectedAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.typeDetectedAttributesTextColorAppearanceProxy {
		}

	}
	//MARK: - LightStyleAvatarView
	override open func AvatarViewStyle() -> GenericStyle.AvatarViewAppearanceProxy {
		if let override = _AvatarView { return override }
			return LightStyleAvatarViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleAvatarViewAppearanceProxy: GenericStyle.AvatarViewAppearanceProxy {

		//MARK: backgroundPlaceholderColor 
		override open func backgroundPlaceholderColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundPlaceholderColor { return override }
			return mainProxy().Color.brand.normalProperty(traitCollection)
			}

		//MARK: foregroundPlaceholderColor 
		override open func foregroundPlaceholderColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundPlaceholderColor { return override }
			return mainProxy().Color.white.normalProperty(traitCollection)
			}
	}
	//MARK: - LightStyleBadgeView
	override open func BadgeViewStyle() -> GenericStyle.BadgeViewAppearanceProxy {
		if let override = _BadgeView { return override }
			return LightStyleBadgeViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleBadgeViewAppearanceProxy: GenericStyle.BadgeViewAppearanceProxy {

		//MARK: defaultSize 
		override open func defaultSizeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> S.ViewSize {
			if let override = _defaultSize { return override }
			return S.ViewSize.large
			}

		//MARK: - LightStyletextOffsetBadgeView
		override open func textOffsetStyle() -> GenericStyle.BadgeViewAppearanceProxy.textOffsetAppearanceProxy {
			if let override = _textOffset { return override }
				return LightStyletextOffsetBadgeViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextOffsetBadgeViewAppearanceProxy: GenericStyle.BadgeViewAppearanceProxy.textOffsetAppearanceProxy {
		}

	}
	//MARK: - LightStyleBlurrableView
	override open func BlurrableViewStyle() -> GenericStyle.BlurrableViewAppearanceProxy {
		if let override = _BlurrableView { return override }
			return LightStyleBlurrableViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleBlurrableViewAppearanceProxy: GenericStyle.BlurrableViewAppearanceProxy {
	}
	//MARK: - LightStyleBounceLayer
	override open func BounceLayerStyle() -> GenericStyle.BounceLayerAppearanceProxy {
		if let override = _BounceLayer { return override }
			return LightStyleBounceLayerAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleBounceLayerAppearanceProxy: GenericStyle.BounceLayerAppearanceProxy {
	}
	//MARK: - LightStyleBubbleView
	override open func BubbleViewStyle() -> GenericStyle.BubbleViewAppearanceProxy {
		if let override = _BubbleView { return override }
			return LightStyleBubbleViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleBubbleViewAppearanceProxy: GenericStyle.BubbleViewAppearanceProxy {

		//MARK: - LightStylebackgroundColorForResizableBubbleView
		override open func backgroundColorForResizableStyle() -> GenericStyle.BubbleViewAppearanceProxy.backgroundColorForResizableAppearanceProxy {
			if let override = _backgroundColorForResizable { return override }
				return LightStylebackgroundColorForResizableBubbleViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebackgroundColorForResizableBubbleViewAppearanceProxy: GenericStyle.BubbleViewAppearanceProxy.backgroundColorForResizableAppearanceProxy {
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(10.0)
			}
	}
	//MARK: - LightStyleButton
	override open func ButtonStyle() -> GenericStyle.ButtonAppearanceProxy {
		if let override = _Button { return override }
			return LightStyleButtonAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy {

		//MARK: - LightStylebackgroundColorButton
		override open func backgroundColorStyle() -> GenericStyle.ButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return LightStylebackgroundColorButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebackgroundColorButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderColorButton
		override open func borderColorStyle() -> GenericStyle.ButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return LightStyleborderColorButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderColorButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStylecolorButton
		override open func colorStyle() -> GenericStyle.ButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecolorButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStylecontentEdgeInsetsButton
		override open func contentEdgeInsetsStyle() -> GenericStyle.ButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {
			if let override = _contentEdgeInsets { return override }
				return LightStylecontentEdgeInsetsButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecontentEdgeInsetsButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {

			//MARK: icon 
			override open func iconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _icon { return override }
					return UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
				}

			//MARK: text 
			override open func textProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _text { return override }
					return UIEdgeInsets(top: 0.0, left: 24.0, bottom: 0.0, right: 24.0)
				}
		}


		//MARK: font 
		override open func fontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _font { return override }
			return mainProxy().Typography.textStyles.subheadlineProperty(traitCollection)
			}

		//MARK: height 
		override open func heightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _height { return override }
			return CGFloat(40.0)
			}

		//MARK: rounded 
		override open func roundedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _rounded { return override }
			return true
			}

		//MARK: - LightStylewidthButton
		override open func widthStyle() -> GenericStyle.ButtonAppearanceProxy.widthAppearanceProxy {
			if let override = _width { return override }
				return LightStylewidthButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylewidthButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.widthAppearanceProxy {
		}

	}
	//MARK: - LightStyleCalloutView
	override open func CalloutViewStyle() -> GenericStyle.CalloutViewAppearanceProxy {
		if let override = _CalloutView { return override }
			return LightStyleCalloutViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy {

		//MARK: - LightStylearrowOffsetCalloutView
		override open func arrowOffsetStyle() -> GenericStyle.CalloutViewAppearanceProxy.arrowOffsetAppearanceProxy {
			if let override = _arrowOffset { return override }
				return LightStylearrowOffsetCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylearrowOffsetCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.arrowOffsetAppearanceProxy {
		}


		//MARK: - LightStylearrowSizeCalloutView
		override open func arrowSizeStyle() -> GenericStyle.CalloutViewAppearanceProxy.arrowSizeAppearanceProxy {
			if let override = _arrowSize { return override }
				return LightStylearrowSizeCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylearrowSizeCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.arrowSizeAppearanceProxy {
		}


		//MARK: - LightStyledurationCalloutView
		override open func durationStyle() -> GenericStyle.CalloutViewAppearanceProxy.durationAppearanceProxy {
			if let override = _duration { return override }
				return LightStyledurationCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledurationCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.durationAppearanceProxy {
		}


		//MARK: - LightStyleedgeMarginCalloutView
		override open func edgeMarginStyle() -> GenericStyle.CalloutViewAppearanceProxy.edgeMarginAppearanceProxy {
			if let override = _edgeMargin { return override }
				return LightStyleedgeMarginCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleedgeMarginCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.edgeMarginAppearanceProxy {
		}

	}
	//MARK: - LightStyleCircularButton
	override open func CircularButtonStyle() -> GenericStyle.CircularButtonAppearanceProxy {
		if let override = _CircularButton { return override }
			return LightStyleCircularButtonAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy {

		//MARK: - LightStylebackgroundColorCircularButton
		override open func backgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return LightStylebackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderColorCircularButton
		override open func borderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return LightStyleborderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStylecolorCircularButton
		override open func colorStyle() -> GenericStyle.CircularButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecolorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBackgroundColorCircularButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return LightStyledestructiveBackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderColorCircularButton
		override open func destructiveBorderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return LightStyledestructiveBorderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderWidthCircularButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return LightStyledestructiveBorderWidthCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderWidthCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(1.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyledestructiveColorCircularButton
		override open func destructiveColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return LightStyledestructiveColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}
		}


		//MARK: fixedAspectRatio 
		override open func fixedAspectRatioProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _fixedAspectRatio { return override }
			return true
			}

		//MARK: height 
		override open func heightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _height { return override }
			return CGFloat(40.0)
			}

		//MARK: - LightStyleprimaryBackgroundColorCircularButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return LightStyleprimaryBackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.brand.b04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderColorCircularButton
		override open func primaryBorderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return LightStyleprimaryBorderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderWidthCircularButton
		override open func primaryBorderWidthStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return LightStyleprimaryBorderWidthCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderWidthCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(1.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyleprimaryColorCircularButton
		override open func primaryColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return LightStyleprimaryColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}
		}


		//MARK: rounded 
		override open func roundedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _rounded { return override }
			return true
			}
	}
	//MARK: - LightStyleColor
	override open func ColorStyle() -> GenericStyle.ColorAppearanceProxy {
		if let override = _Color { return override }
			return LightStyleColorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleColorAppearanceProxy: GenericStyle.ColorAppearanceProxy {

		//MARK: - LightStyleblackColor
		override open func blackStyle() -> GenericStyle.ColorAppearanceProxy.blackAppearanceProxy {
			if let override = _black { return override }
				return LightStyleblackColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleblackColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.blackAppearanceProxy {
		}


		//MARK: - LightStylebrandColor
		override open func brandStyle() -> GenericStyle.ColorAppearanceProxy.brandAppearanceProxy {
			if let override = _brand { return override }
				return LightStylebrandColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebrandColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.brandAppearanceProxy {
		}


		//MARK: - LightStylegrayColor
		override open func grayStyle() -> GenericStyle.ColorAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return LightStylegrayColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegrayColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - LightStylegreenColor
		override open func greenStyle() -> GenericStyle.ColorAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return LightStylegreenColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegreenColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - LightStylemagentaColor
		override open func magentaStyle() -> GenericStyle.ColorAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return LightStylemagentaColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylemagentaColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - LightStyleorangeColor
		override open func orangeStyle() -> GenericStyle.ColorAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return LightStyleorangeColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleorangeColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - LightStylepinkColor
		override open func pinkStyle() -> GenericStyle.ColorAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return LightStylepinkColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepinkColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - LightStyleredColor
		override open func redStyle() -> GenericStyle.ColorAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return LightStyleredColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleredColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - LightStylewhiteColor
		override open func whiteStyle() -> GenericStyle.ColorAppearanceProxy.whiteAppearanceProxy {
			if let override = _white { return override }
				return LightStylewhiteColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylewhiteColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.whiteAppearanceProxy {
		}


		//MARK: - LightStyleyellowColor
		override open func yellowStyle() -> GenericStyle.ColorAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return LightStyleyellowColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleyellowColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - LightStyleColorSchemeMapping
	override open func ColorSchemeMappingStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy {
		if let override = _ColorSchemeMapping { return override }
			return LightStyleColorSchemeMappingAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy {

		//MARK: - LightStyleblackColorSchemeMapping
		override open func blackStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.blackAppearanceProxy {
			if let override = _black { return override }
				return LightStyleblackColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleblackColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.blackAppearanceProxy {
		}


		//MARK: - LightStyledarkOrangeColorSchemeMapping
		override open func darkOrangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.darkOrangeAppearanceProxy {
			if let override = _darkOrange { return override }
				return LightStyledarkOrangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledarkOrangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.darkOrangeAppearanceProxy {
		}


		//MARK: - LightStylegrayColorSchemeMapping
		override open func grayStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return LightStylegrayColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegrayColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - LightStylegreenColorSchemeMapping
		override open func greenStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return LightStylegreenColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegreenColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - LightStylelightGreenColorSchemeMapping
		override open func lightGreenStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.lightGreenAppearanceProxy {
			if let override = _lightGreen { return override }
				return LightStylelightGreenColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelightGreenColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.lightGreenAppearanceProxy {
		}


		//MARK: - LightStylemagentaColorSchemeMapping
		override open func magentaStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return LightStylemagentaColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylemagentaColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - LightStyleorangeColorSchemeMapping
		override open func orangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return LightStyleorangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleorangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - LightStylepinkColorSchemeMapping
		override open func pinkStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return LightStylepinkColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepinkColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - LightStylepostOrangeColorSchemeMapping
		override open func postOrangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.postOrangeAppearanceProxy {
			if let override = _postOrange { return override }
				return LightStylepostOrangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepostOrangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.postOrangeAppearanceProxy {
		}


		//MARK: - LightStyleprimaryColorSchemeMapping
		override open func primaryStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.primaryAppearanceProxy {
			if let override = _primary { return override }
				return LightStyleprimaryColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.primaryAppearanceProxy {
		}


		//MARK: - LightStyleredColorSchemeMapping
		override open func redStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return LightStyleredColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleredColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - LightStylewhiteColorSchemeMapping
		override open func whiteStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.whiteAppearanceProxy {
			if let override = _white { return override }
				return LightStylewhiteColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylewhiteColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.whiteAppearanceProxy {
		}


		//MARK: - LightStyleyellowColorSchemeMapping
		override open func yellowStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return LightStyleyellowColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleyellowColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - LightStyleContentItemTableViewCell
	override open func ContentItemTableViewCellStyle() -> GenericStyle.ContentItemTableViewCellAppearanceProxy {
		if let override = _ContentItemTableViewCell { return override }
			return LightStyleContentItemTableViewCellAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleContentItemTableViewCellAppearanceProxy: GenericStyle.ContentItemTableViewCellAppearanceProxy {

		//MARK: - LightStylecheckmarkBorderColorContentItemTableViewCell
		override open func checkmarkBorderColorStyle() -> GenericStyle.ContentItemTableViewCellAppearanceProxy.checkmarkBorderColorAppearanceProxy {
			if let override = _checkmarkBorderColor { return override }
				return LightStylecheckmarkBorderColorContentItemTableViewCellAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecheckmarkBorderColorContentItemTableViewCellAppearanceProxy: GenericStyle.ContentItemTableViewCellAppearanceProxy.checkmarkBorderColorAppearanceProxy {
		}

	}
	//MARK: - LightStyleContentItemView
	override open func ContentItemViewStyle() -> GenericStyle.ContentItemViewAppearanceProxy {
		if let override = _ContentItemView { return override }
			return LightStyleContentItemViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy {

		//MARK: - LightStylerightActionTitleColorItemsContentItemView
		override open func rightActionTitleColorItemsStyle() -> GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleColorItemsAppearanceProxy {
			if let override = _rightActionTitleColorItems { return override }
				return LightStylerightActionTitleColorItemsContentItemViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylerightActionTitleColorItemsContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleColorItemsAppearanceProxy {
		}


		//MARK: - LightStylerightActionTitleEdgeInsetsContentItemView
		override open func rightActionTitleEdgeInsetsStyle() -> GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleEdgeInsetsAppearanceProxy {
			if let override = _rightActionTitleEdgeInsets { return override }
				return LightStylerightActionTitleEdgeInsetsContentItemViewAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylerightActionTitleEdgeInsetsContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleEdgeInsetsAppearanceProxy {
		}

	}
	//MARK: - LightStyleDivider
	override open func DividerStyle() -> GenericStyle.DividerAppearanceProxy {
		if let override = _Divider { return override }
			return LightStyleDividerAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy {

		//MARK: - LightStyleimportantTextFontDivider
		override open func importantTextFontStyle() -> GenericStyle.DividerAppearanceProxy.importantTextFontAppearanceProxy {
			if let override = _importantTextFont { return override }
				return LightStyleimportantTextFontDividerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleimportantTextFontDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy.importantTextFontAppearanceProxy {
		}


		//MARK: - LightStyletextFontDivider
		override open func textFontStyle() -> GenericStyle.DividerAppearanceProxy.textFontAppearanceProxy {
			if let override = _textFont { return override }
				return LightStyletextFontDividerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextFontDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy.textFontAppearanceProxy {
		}

	}
	//MARK: - LightStyleDuration
	override open func DurationStyle() -> GenericStyle.DurationAppearanceProxy {
		if let override = _Duration { return override }
			return LightStyleDurationAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleDurationAppearanceProxy: GenericStyle.DurationAppearanceProxy {

		//MARK: - LightStyleintervalDuration
		override open func intervalStyle() -> GenericStyle.DurationAppearanceProxy.intervalAppearanceProxy {
			if let override = _interval { return override }
				return LightStyleintervalDurationAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleintervalDurationAppearanceProxy: GenericStyle.DurationAppearanceProxy.intervalAppearanceProxy {

			//MARK: long 
			override open func longProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _long { return override }
					return CGFloat(1.0)
				}
		}

	}
	//MARK: - LightStyleElementColor
	override open func ElementColorStyle() -> GenericStyle.ElementColorAppearanceProxy {
		if let override = _ElementColor { return override }
			return LightStyleElementColorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleElementColorAppearanceProxy: GenericStyle.ElementColorAppearanceProxy {

		//MARK: - LightStylepresenceColorElementColor
		override open func presenceColorStyle() -> GenericStyle.ElementColorAppearanceProxy.presenceColorAppearanceProxy {
			if let override = _presenceColor { return override }
				return LightStylepresenceColorElementColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepresenceColorElementColorAppearanceProxy: GenericStyle.ElementColorAppearanceProxy.presenceColorAppearanceProxy {
		}

	}
	//MARK: - LightStyleEmphasisColor
	override open func EmphasisColorStyle() -> GenericStyle.EmphasisColorAppearanceProxy {
		if let override = _EmphasisColor { return override }
			return LightStyleEmphasisColorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleEmphasisColorAppearanceProxy: GenericStyle.EmphasisColorAppearanceProxy {

		//MARK: - LightStyleprimaryEmphasisColor
		override open func primaryStyle() -> GenericStyle.EmphasisColorAppearanceProxy.primaryAppearanceProxy {
			if let override = _primary { return override }
				return LightStyleprimaryEmphasisColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryEmphasisColorAppearanceProxy: GenericStyle.EmphasisColorAppearanceProxy.primaryAppearanceProxy {

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return UIColor(red: 0.0, green: 0.47058824, blue: 0.83137256, alpha: 1.0)
				}

			//MARK: v100 
			override open func v100Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v100 { return override }
					return UIColor(red: 0.49803922, green: 0.8, blue: 0.94509804, alpha: 1.0)
				}

			//MARK: v200 
			override open func v200Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v200 { return override }
					return UIColor(red: 0.24705882, green: 0.7019608, blue: 0.91764706, alpha: 1.0)
				}

			//MARK: v300 
			override open func v300Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v300 { return override }
					return UIColor(red: 0.0, green: 0.6039216, blue: 0.8901961, alpha: 1.0)
				}

			//MARK: v400 
			override open func v400Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v400 { return override }
					return UIColor(red: 0.0, green: 0.5372549, blue: 0.85882354, alpha: 1.0)
				}

			//MARK: v50 
			override open func v50Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v50 { return override }
					return UIColor(red: 0.7490196, green: 0.8980392, blue: 0.972549, alpha: 1.0)
				}

			//MARK: v500 
			override open func v500Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v500 { return override }
					return UIColor(red: 0.0, green: 0.47058824, blue: 0.83137256, alpha: 1.0)
				}

			//MARK: v600 
			override open func v600Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v600 { return override }
					return UIColor(red: 0.0, green: 0.41960785, blue: 0.7411765, alpha: 1.0)
				}

			//MARK: v700 
			override open func v700Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v700 { return override }
					return UIColor(red: 0.0, green: 0.36862746, blue: 0.654902, alpha: 1.0)
				}

			//MARK: v800 
			override open func v800Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v800 { return override }
					return UIColor(red: 0.0, green: 0.31764707, blue: 0.5647059, alpha: 1.0)
				}

			//MARK: v900 
			override open func v900Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _v900 { return override }
					return UIColor(red: 0.0, green: 0.27058825, blue: 0.47843137, alpha: 1.0)
				}
		}

	}
	//MARK: - LightStyleEmptyListView
	override open func EmptyListViewStyle() -> GenericStyle.EmptyListViewAppearanceProxy {
		if let override = _EmptyListView { return override }
			return LightStyleEmptyListViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleEmptyListViewAppearanceProxy: GenericStyle.EmptyListViewAppearanceProxy {
	}
	//MARK: - LightStyleEnums
	override open func EnumsStyle() -> GenericStyle.EnumsAppearanceProxy {
		if let override = _Enums { return override }
			return LightStyleEnumsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleEnumsAppearanceProxy: GenericStyle.EnumsAppearanceProxy {
	}
	//MARK: - LightStyleHeader
	override open func HeaderStyle() -> GenericStyle.HeaderAppearanceProxy {
		if let override = _Header { return override }
			return LightStyleHeaderAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy {

		//MARK: - LightStyleheadingFontHeader
		override open func headingFontStyle() -> GenericStyle.HeaderAppearanceProxy.headingFontAppearanceProxy {
			if let override = _headingFont { return override }
				return LightStyleheadingFontHeaderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleheadingFontHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy.headingFontAppearanceProxy {
		}


		//MARK: - LightStyleparagraphFontHeader
		override open func paragraphFontStyle() -> GenericStyle.HeaderAppearanceProxy.paragraphFontAppearanceProxy {
			if let override = _paragraphFont { return override }
				return LightStyleparagraphFontHeaderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleparagraphFontHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy.paragraphFontAppearanceProxy {
		}

	}
	//MARK: - LightStyleIcon
	override open func IconStyle() -> GenericStyle.IconAppearanceProxy {
		if let override = _Icon { return override }
			return LightStyleIconAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleIconAppearanceProxy: GenericStyle.IconAppearanceProxy {

		//MARK: - LightStylesizeIcon
		override open func sizeStyle() -> GenericStyle.IconAppearanceProxy.sizeAppearanceProxy {
			if let override = _size { return override }
				return LightStylesizeIconAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylesizeIconAppearanceProxy: GenericStyle.IconAppearanceProxy.sizeAppearanceProxy {
		}

	}
	//MARK: - LightStyleIconButton
	override open func IconButtonStyle() -> GenericStyle.IconButtonAppearanceProxy {
		if let override = _IconButton { return override }
			return LightStyleIconButtonAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleIconButtonAppearanceProxy: GenericStyle.IconButtonAppearanceProxy {

		//MARK: - IconButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return IconButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		open class IconButtonbackgroundColorAppearanceProxy: ButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - IconButtonborderColor
		override open func borderColorStyle() -> ButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return IconButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		open class IconButtonborderColorAppearanceProxy: ButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - IconButtoncolor
		override open func colorStyle() -> ButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return IconButtoncolorAppearanceProxy(proxy: mainProxy)
			}
		open class IconButtoncolorAppearanceProxy: ButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: fixedAspectRatio 
		override open func fixedAspectRatioProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _fixedAspectRatio { return override }
			return true
			}

		//MARK: height 
		override open func heightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _height { return override }
			return CGFloat(40.0)
			}

		//MARK: rounded 
		override open func roundedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _rounded { return override }
			return true
			}
	}
	//MARK: - LightStyleImageView
	override open func ImageViewStyle() -> GenericStyle.ImageViewAppearanceProxy {
		if let override = _ImageView { return override }
			return LightStyleImageViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleImageViewAppearanceProxy: GenericStyle.ImageViewAppearanceProxy {

		//MARK: backgroundPlaceholderColor 
		override open func backgroundPlaceholderColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundPlaceholderColor { return override }
			return mainProxy().Color.gray.g08Property(traitCollection)
			}

		//MARK: foregroundPlaceholderColor 
		override open func foregroundPlaceholderColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundPlaceholderColor { return override }
			return mainProxy().Color.brand.normalProperty(traitCollection)
			}

		//MARK: placeholderFont 
		override open func placeholderFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _placeholderFont { return override }
			return mainProxy().Typography.small.boldProperty(traitCollection)
			}
	}
	//MARK: - LightStyleIndicator
	override open func IndicatorStyle() -> GenericStyle.IndicatorAppearanceProxy {
		if let override = _Indicator { return override }
			return LightStyleIndicatorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleIndicatorAppearanceProxy: GenericStyle.IndicatorAppearanceProxy {

		//MARK: - LightStyledirectionIconsIndicator
		override open func directionIconsStyle() -> GenericStyle.IndicatorAppearanceProxy.directionIconsAppearanceProxy {
			if let override = _directionIcons { return override }
				return LightStyledirectionIconsIndicatorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledirectionIconsIndicatorAppearanceProxy: GenericStyle.IndicatorAppearanceProxy.directionIconsAppearanceProxy {
		}

	}
	//MARK: - LightStyleLabel
	override open func LabelStyle() -> GenericStyle.LabelAppearanceProxy {
		if let override = _Label { return override }
			return LightStyleLabelAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleLabelAppearanceProxy: GenericStyle.LabelAppearanceProxy {
	}
	//MARK: - LightStyleLoader
	override open func LoaderStyle() -> GenericStyle.LoaderAppearanceProxy {
		if let override = _Loader { return override }
			return LightStyleLoaderAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleLoaderAppearanceProxy: GenericStyle.LoaderAppearanceProxy {

		//MARK: - LightStylelabelFontLoader
		override open func labelFontStyle() -> GenericStyle.LoaderAppearanceProxy.labelFontAppearanceProxy {
			if let override = _labelFont { return override }
				return LightStylelabelFontLoaderAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelabelFontLoaderAppearanceProxy: GenericStyle.LoaderAppearanceProxy.labelFontAppearanceProxy {
		}

	}
	//MARK: - LightStyleMetric
	override open func MetricStyle() -> GenericStyle.MetricAppearanceProxy {
		if let override = _Metric { return override }
			return LightStyleMetricAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleMetricAppearanceProxy: GenericStyle.MetricAppearanceProxy {
	}
	//MARK: - LightStyleNaturalColor
	override open func NaturalColorStyle() -> GenericStyle.NaturalColorAppearanceProxy {
		if let override = _NaturalColor { return override }
			return LightStyleNaturalColorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy {

		//MARK: - LightStyledarkOrangeNaturalColor
		override open func darkOrangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.darkOrangeAppearanceProxy {
			if let override = _darkOrange { return override }
				return LightStyledarkOrangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledarkOrangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.darkOrangeAppearanceProxy {
		}


		//MARK: - LightStylegrayNaturalColor
		override open func grayStyle() -> GenericStyle.NaturalColorAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return LightStylegrayNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegrayNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - LightStylegreenNaturalColor
		override open func greenStyle() -> GenericStyle.NaturalColorAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return LightStylegreenNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylegreenNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - LightStylelightGreenNaturalColor
		override open func lightGreenStyle() -> GenericStyle.NaturalColorAppearanceProxy.lightGreenAppearanceProxy {
			if let override = _lightGreen { return override }
				return LightStylelightGreenNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelightGreenNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.lightGreenAppearanceProxy {
		}


		//MARK: - LightStylemagentaNaturalColor
		override open func magentaStyle() -> GenericStyle.NaturalColorAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return LightStylemagentaNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylemagentaNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - LightStyleorangeNaturalColor
		override open func orangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return LightStyleorangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleorangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - LightStylepinkNaturalColor
		override open func pinkStyle() -> GenericStyle.NaturalColorAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return LightStylepinkNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepinkNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - LightStylepostOrangeNaturalColor
		override open func postOrangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.postOrangeAppearanceProxy {
			if let override = _postOrange { return override }
				return LightStylepostOrangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepostOrangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.postOrangeAppearanceProxy {
		}


		//MARK: - LightStyleredNaturalColor
		override open func redStyle() -> GenericStyle.NaturalColorAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return LightStyleredNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleredNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - LightStyleyellowNaturalColor
		override open func yellowStyle() -> GenericStyle.NaturalColorAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return LightStyleyellowNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleyellowNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - LightStyleNavigationBar
	override open func NavigationBarStyle() -> GenericStyle.NavigationBarAppearanceProxy {
		if let override = _NavigationBar { return override }
			return LightStyleNavigationBarAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy {

		//MARK: backgroundColor 
		override open func backgroundColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundColor { return override }
			return mainProxy().Color.white.normalProperty(traitCollection)
			}

		//MARK: - LightStylebarButtonItemsIconSizeNavigationBar
		override open func barButtonItemsIconSizeStyle() -> GenericStyle.NavigationBarAppearanceProxy.barButtonItemsIconSizeAppearanceProxy {
			if let override = _barButtonItemsIconSize { return override }
				return LightStylebarButtonItemsIconSizeNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebarButtonItemsIconSizeNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.barButtonItemsIconSizeAppearanceProxy {
		}


		//MARK: - LightStylebarButtonItemsImageSizeNavigationBar
		override open func barButtonItemsImageSizeStyle() -> GenericStyle.NavigationBarAppearanceProxy.barButtonItemsImageSizeAppearanceProxy {
			if let override = _barButtonItemsImageSize { return override }
				return LightStylebarButtonItemsImageSizeNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebarButtonItemsImageSizeNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.barButtonItemsImageSizeAppearanceProxy {
		}


		//MARK: - LightStyletitleHighlightedColorBarItemsNavigationBar
		override open func titleHighlightedColorBarItemsStyle() -> GenericStyle.NavigationBarAppearanceProxy.titleHighlightedColorBarItemsAppearanceProxy {
			if let override = _titleHighlightedColorBarItems { return override }
				return LightStyletitleHighlightedColorBarItemsNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleHighlightedColorBarItemsNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.titleHighlightedColorBarItemsAppearanceProxy {
		}

	}
	//MARK: - LightStyleOptions
	override open func OptionsStyle() -> GenericStyle.OptionsAppearanceProxy {
		if let override = _Options { return override }
			return LightStyleOptionsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleOptionsAppearanceProxy: GenericStyle.OptionsAppearanceProxy {
	}
	//MARK: - LightStylePageControl
	override open func PageControlStyle() -> GenericStyle.PageControlAppearanceProxy {
		if let override = _PageControl { return override }
			return LightStylePageControlAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStylePageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy {

		//MARK: - LightStylediameterPageControl
		override open func diameterStyle() -> GenericStyle.PageControlAppearanceProxy.diameterAppearanceProxy {
			if let override = _diameter { return override }
				return LightStylediameterPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylediameterPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.diameterAppearanceProxy {
		}


		//MARK: - LightStyleindicatorColorPageControl
		override open func indicatorColorStyle() -> GenericStyle.PageControlAppearanceProxy.indicatorColorAppearanceProxy {
			if let override = _indicatorColor { return override }
				return LightStyleindicatorColorPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleindicatorColorPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.indicatorColorAppearanceProxy {
		}


		//MARK: keepsSameSpaceBetweenDots 
		override open func keepsSameSpaceBetweenDotsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _keepsSameSpaceBetweenDots { return override }
			return false
			}

		//MARK: - LightStylepaddingPageControl
		override open func paddingStyle() -> GenericStyle.PageControlAppearanceProxy.paddingAppearanceProxy {
			if let override = _padding { return override }
				return LightStylepaddingPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylepaddingPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.paddingAppearanceProxy {
		}

	}
	//MARK: - LightStylePartitionedCollectionViewLayout
	override open func PartitionedCollectionViewLayoutStyle() -> GenericStyle.PartitionedCollectionViewLayoutAppearanceProxy {
		if let override = _PartitionedCollectionViewLayout { return override }
			return LightStylePartitionedCollectionViewLayoutAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStylePartitionedCollectionViewLayoutAppearanceProxy: GenericStyle.PartitionedCollectionViewLayoutAppearanceProxy {
	}
	//MARK: - LightStylePinAvatarView
	override open func PinAvatarViewStyle() -> GenericStyle.PinAvatarViewAppearanceProxy {
		if let override = _PinAvatarView { return override }
			return LightStylePinAvatarViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStylePinAvatarViewAppearanceProxy: GenericStyle.PinAvatarViewAppearanceProxy {
	}
	//MARK: - LightStylePresence
	override open func PresenceStyle() -> GenericStyle.PresenceAppearanceProxy {
		if let override = _Presence { return override }
			return LightStylePresenceAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStylePresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy {

		//MARK: - LightStyleiconPresence
		override open func iconStyle() -> GenericStyle.PresenceAppearanceProxy.iconAppearanceProxy {
			if let override = _icon { return override }
				return LightStyleiconPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleiconPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.iconAppearanceProxy {
		}


		//MARK: - LightStyleiconColorPresence
		override open func iconColorStyle() -> GenericStyle.PresenceAppearanceProxy.iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return LightStyleiconColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleiconColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.iconColorAppearanceProxy {
		}


		//MARK: - LightStyleinnerColorPresence
		override open func innerColorStyle() -> GenericStyle.PresenceAppearanceProxy.innerColorAppearanceProxy {
			if let override = _innerColor { return override }
				return LightStyleinnerColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleinnerColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.innerColorAppearanceProxy {
		}


		//MARK: - LightStyleouterColorPresence
		override open func outerColorStyle() -> GenericStyle.PresenceAppearanceProxy.outerColorAppearanceProxy {
			if let override = _outerColor { return override }
				return LightStyleouterColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleouterColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.outerColorAppearanceProxy {
		}


		//MARK: - LightStylestrokeWidthPresence
		override open func strokeWidthStyle() -> GenericStyle.PresenceAppearanceProxy.strokeWidthAppearanceProxy {
			if let override = _strokeWidth { return override }
				return LightStylestrokeWidthPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylestrokeWidthPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.strokeWidthAppearanceProxy {
		}

	}
	//MARK: - LightStylePresenceStatusView
	override open func PresenceStatusViewStyle() -> GenericStyle.PresenceStatusViewAppearanceProxy {
		if let override = _PresenceStatusView { return override }
			return LightStylePresenceStatusViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStylePresenceStatusViewAppearanceProxy: GenericStyle.PresenceStatusViewAppearanceProxy {
	}
	//MARK: - LightStyleSearchBar
	override open func SearchBarStyle() -> GenericStyle.SearchBarAppearanceProxy {
		if let override = _SearchBar { return override }
			return LightStyleSearchBarAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleSearchBarAppearanceProxy: GenericStyle.SearchBarAppearanceProxy {
	}
	//MARK: - LightStyleSwipeTableViewCell
	override open func SwipeTableViewCellStyle() -> GenericStyle.SwipeTableViewCellAppearanceProxy {
		if let override = _SwipeTableViewCell { return override }
			return LightStyleSwipeTableViewCellAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleSwipeTableViewCellAppearanceProxy: GenericStyle.SwipeTableViewCellAppearanceProxy {
	}
	//MARK: - LightStyleTabBarController
	override open func TabBarControllerStyle() -> GenericStyle.TabBarControllerAppearanceProxy {
		if let override = _TabBarController { return override }
			return LightStyleTabBarControllerAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy {

		//MARK: - LightStyleiconColorTabBarController
		override open func iconColorStyle() -> GenericStyle.TabBarControllerAppearanceProxy.iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return LightStyleiconColorTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleiconColorTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.iconColorAppearanceProxy {
		}


		//MARK: - LightStyleimageInsetsTabBarController
		override open func imageInsetsStyle() -> GenericStyle.TabBarControllerAppearanceProxy.imageInsetsAppearanceProxy {
			if let override = _imageInsets { return override }
				return LightStyleimageInsetsTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleimageInsetsTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.imageInsetsAppearanceProxy {
		}


		//MARK: - LightStyletextColorTabBarController
		override open func textColorStyle() -> GenericStyle.TabBarControllerAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return LightStyletextColorTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextColorTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.textColorAppearanceProxy {
		}


		//MARK: - LightStyletextFontTabBarController
		override open func textFontStyle() -> GenericStyle.TabBarControllerAppearanceProxy.textFontAppearanceProxy {
			if let override = _textFont { return override }
				return LightStyletextFontTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextFontTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.textFontAppearanceProxy {
		}


		//MARK: - LightStyletitleVerticalOffsetTabBarController
		override open func titleVerticalOffsetStyle() -> GenericStyle.TabBarControllerAppearanceProxy.titleVerticalOffsetAppearanceProxy {
			if let override = _titleVerticalOffset { return override }
				return LightStyletitleVerticalOffsetTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleVerticalOffsetTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.titleVerticalOffsetAppearanceProxy {
		}

	}
	//MARK: - LightStyleTextButton
	override open func TextButtonStyle() -> GenericStyle.TextButtonAppearanceProxy {
		if let override = _TextButton { return override }
			return LightStyleTextButtonAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy {

		//MARK: - LightStylebackgroundColorTextButton
		override open func backgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return LightStylebackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylebackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderColorTextButton
		override open func borderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return LightStyleborderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleborderWidthTextButton
		override open func borderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return LightStyleborderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleborderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.borderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStylecolorTextButton
		override open func colorStyle() -> GenericStyle.TextButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylecolorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: - LightStyledestructiveBackgroundColorTextButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return LightStyledestructiveBackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderColorTextButton
		override open func destructiveBorderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return LightStyledestructiveBorderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyledestructiveBorderWidthTextButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return LightStyledestructiveBorderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveBorderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyledestructiveColorTextButton
		override open func destructiveColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return LightStyledestructiveColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyledestructiveColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBackgroundColorTextButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return LightStyleprimaryBackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderColorTextButton
		override open func primaryBorderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return LightStyleprimaryBorderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - LightStyleprimaryBorderWidthTextButton
		override open func primaryBorderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return LightStyleprimaryBorderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryBorderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - LightStyleprimaryColorTextButton
		override open func primaryColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return LightStyleprimaryColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyleprimaryColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}

	}
	//MARK: - LightStyleTextField
	override open func TextFieldStyle() -> GenericStyle.TextFieldAppearanceProxy {
		if let override = _TextField { return override }
			return LightStyleTextFieldAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTextFieldAppearanceProxy: GenericStyle.TextFieldAppearanceProxy {
	}
	//MARK: - LightStyleTimingFunctions
	override open func TimingFunctionsStyle() -> GenericStyle.TimingFunctionsAppearanceProxy {
		if let override = _TimingFunctions { return override }
			return LightStyleTimingFunctionsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTimingFunctionsAppearanceProxy: GenericStyle.TimingFunctionsAppearanceProxy {
	}
	//MARK: - LightStyleTitleNavigationBar
	override open func TitleNavigationBarStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy {
		if let override = _TitleNavigationBar { return override }
			return LightStyleTitleNavigationBarAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy {

		//MARK: - LightStyletitleActionColorTitleNavigationBar
		override open func titleActionColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionColorAppearanceProxy {
			if let override = _titleActionColor { return override }
				return LightStyletitleActionColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleActionColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionColorAppearanceProxy {
		}


		//MARK: - LightStyletitleActionIndicatorBackgroundColorTitleNavigationBar
		override open func titleActionIndicatorBackgroundColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorBackgroundColorAppearanceProxy {
			if let override = _titleActionIndicatorBackgroundColor { return override }
				return LightStyletitleActionIndicatorBackgroundColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleActionIndicatorBackgroundColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorBackgroundColorAppearanceProxy {
		}


		//MARK: - LightStyletitleActionIndicatorColorTitleNavigationBar
		override open func titleActionIndicatorColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorColorAppearanceProxy {
			if let override = _titleActionIndicatorColor { return override }
				return LightStyletitleActionIndicatorColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleActionIndicatorColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorColorAppearanceProxy {
		}


		//MARK: titleAlignment 
		override open func titleAlignmentProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> S.TextAlignment {
			if let override = _titleAlignment { return override }
			return S.TextAlignment.left
			}
	}
	//MARK: - LightStyleToolbar
	override open func ToolbarStyle() -> GenericStyle.ToolbarAppearanceProxy {
		if let override = _Toolbar { return override }
			return LightStyleToolbarAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleToolbarAppearanceProxy: GenericStyle.ToolbarAppearanceProxy {

		//MARK: backgroundColor 
		override open func backgroundColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundColor { return override }
			return mainProxy().Color.white.normalProperty(traitCollection)
			}
	}
	//MARK: - LightStyleTransparentNavigationBar
	override open func TransparentNavigationBarStyle() -> GenericStyle.TransparentNavigationBarAppearanceProxy {
		if let override = _TransparentNavigationBar { return override }
			return LightStyleTransparentNavigationBarAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTransparentNavigationBarAppearanceProxy: GenericStyle.TransparentNavigationBarAppearanceProxy {

		//MARK: - LightStyletitleColorBarItemsTransparentNavigationBar
		override open func titleColorBarItemsStyle() -> GenericStyle.TransparentNavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
			if let override = _titleColorBarItems { return override }
				return LightStyletitleColorBarItemsTransparentNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletitleColorBarItemsTransparentNavigationBarAppearanceProxy: GenericStyle.TransparentNavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
		}

	}
	//MARK: - LightStyleTypography
	override open func TypographyStyle() -> GenericStyle.TypographyAppearanceProxy {
		if let override = _Typography { return override }
			return LightStyleTypographyAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	open class LightStyleTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy {

		//MARK: - LightStylelargeTypography
		override open func largeStyle() -> GenericStyle.TypographyAppearanceProxy.largeAppearanceProxy {
			if let override = _large { return override }
				return LightStylelargeTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelargeTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.largeAppearanceProxy {
		}


		//MARK: - LightStylelargerTypography
		override open func largerStyle() -> GenericStyle.TypographyAppearanceProxy.largerAppearanceProxy {
			if let override = _larger { return override }
				return LightStylelargerTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylelargerTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.largerAppearanceProxy {
		}


		//MARK: - LightStylemediumTypography
		override open func mediumStyle() -> GenericStyle.TypographyAppearanceProxy.mediumAppearanceProxy {
			if let override = _medium { return override }
				return LightStylemediumTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylemediumTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.mediumAppearanceProxy {
		}


		//MARK: - LightStylesmallTypography
		override open func smallStyle() -> GenericStyle.TypographyAppearanceProxy.smallAppearanceProxy {
			if let override = _small { return override }
				return LightStylesmallTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylesmallTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.smallAppearanceProxy {
		}


		//MARK: - LightStylesmallerTypography
		override open func smallerStyle() -> GenericStyle.TypographyAppearanceProxy.smallerAppearanceProxy {
			if let override = _smaller { return override }
				return LightStylesmallerTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStylesmallerTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.smallerAppearanceProxy {
		}


		//MARK: - LightStyletextStylesTypography
		override open func textStylesStyle() -> GenericStyle.TypographyAppearanceProxy.textStylesAppearanceProxy {
			if let override = _textStyles { return override }
				return LightStyletextStylesTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class LightStyletextStylesTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.textStylesAppearanceProxy {
		}

	}
	//MARK: - Animator
	override public func AnimatorAnimator() -> GenericStyle.AnimatorAnimatorProxy {
		if let override = _Animator { return override }
			return LightStyleAnimatorAnimatorProxy()
		}
	public class LightStyleAnimatorAnimatorProxy: GenericStyle.AnimatorAnimatorProxy {

		//MARK: - LightStylerotate
		override open func rotateStyle() -> GenericStyle.AnimatorAnimatorProxy.rotateAppearanceProxy {
			if let override = _rotate { return override }
				return LightStylerotateAppearanceProxy(proxy: { return LightStyle.shared() })
			}
		open class LightStylerotateAppearanceProxy: GenericStyle.AnimatorAnimatorProxy.rotateAppearanceProxy {

		//MARK: curve 
		override open func curveProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> AnimationCurveType {
			if let override = _curve { return override }
			return mainProxy().TimingFunctions.easeInProperty(traitCollection)
			}

		//MARK: delay 
		override open func delayProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _delay { return override }
			return CGFloat(0.0)
			}

		//MARK: duration 
		override open func durationProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _duration { return override }
			return mainProxy().Duration.interval.longProperty(traitCollection)
			}

		//MARK: keyFrames 
		override open func keyFramesProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> [KeyFrame] {
			if let override = _keyFrames { return override }
			return [
			KeyFrame(relativeStartTime: 0.0, relativeDuration: nil, values: 
			[
			.rotate(from: 
			CGFloat(0.0), to: 
			CGFloat(360.0))])]
			}

		//MARK: repeatCount 
		override open func repeatCountProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> AnimationRepeatCount {
			if let override = _repeatCount { return override }
			return AnimationRepeatCount.count(0)
			}
		}
	

}
}