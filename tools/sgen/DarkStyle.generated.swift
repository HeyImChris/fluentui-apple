/// Autogenerated file

// swiftlint:disable all
import UIKit

/// Entry point for the app stylesheet
public class DarkStyle: GenericStyle {

	public override class func shared() -> DarkStyle {
		 struct __ { static let _sharedInstance = DarkStyle() }
		return __._sharedInstance
	}
	//MARK: - DarkStyleActionSheet
	override open func ActionSheetStyle() -> GenericStyle.ActionSheetAppearanceProxy {
		if let override = _ActionSheet { return override }
			return DarkStyleActionSheetAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleActionSheetAppearanceProxy: GenericStyle.ActionSheetAppearanceProxy {
	}
	//MARK: - DarkStyleActionSheetButton
	override open func ActionSheetButtonStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy {
		if let override = _ActionSheetButton { return override }
			return DarkStyleActionSheetButtonAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy {

		//MARK: - DarkStylebackgroundColorActionSheetButton
		override open func backgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return DarkStylebackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleborderColorActionSheetButton
		override open func borderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return DarkStyleborderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleborderWidthActionSheetButton
		override open func borderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return DarkStyleborderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.borderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStylecolorActionSheetButton
		override open func colorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return DarkStylecolorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecolorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.black.overlayProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
		}


		//MARK: contentAlignment 
		override open func contentAlignmentProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> S.ViewAlignment {
			if let override = _contentAlignment { return override }
			return S.ViewAlignment.leading
			}

		//MARK: - DarkStylecontentEdgeInsetsActionSheetButton
		override open func contentEdgeInsetsStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {
			if let override = _contentEdgeInsets { return override }
				return DarkStylecontentEdgeInsetsActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecontentEdgeInsetsActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {

			//MARK: icon 
			override open func iconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _icon { return override }
					return UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
				}

			//MARK: text 
			override open func textProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _text { return override }
					return UIEdgeInsets(top: 0.0, left: 5.0, bottom: 0.0, right: 5.0)
				}
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: - DarkStyledestructiveBackgroundColorActionSheetButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return DarkStyledestructiveBackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderColorActionSheetButton
		override open func destructiveBorderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return DarkStyledestructiveBorderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderWidthActionSheetButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return DarkStyledestructiveBorderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyledestructiveColorActionSheetButton
		override open func destructiveColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return DarkStyledestructiveColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBackgroundColorActionSheetButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return DarkStyleprimaryBackgroundColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBackgroundColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderColorActionSheetButton
		override open func primaryBorderColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return DarkStyleprimaryBorderColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderWidthActionSheetButton
		override open func primaryBorderWidthStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return DarkStyleprimaryBorderWidthActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderWidthActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyleprimaryColorActionSheetButton
		override open func primaryColorStyle() -> GenericStyle.ActionSheetButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return DarkStyleprimaryColorActionSheetButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryColorActionSheetButtonAppearanceProxy: GenericStyle.ActionSheetButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.black.overlayProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.black.normalProperty(traitCollection)
				}
		}

	}
	//MARK: - DarkStyleAlertController
	override open func AlertControllerStyle() -> GenericStyle.AlertControllerAppearanceProxy {
		if let override = _AlertController { return override }
			return DarkStyleAlertControllerAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAlertControllerAppearanceProxy: GenericStyle.AlertControllerAppearanceProxy {

		//MARK: usesNative 
		override open func usesNativeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _usesNative { return override }
			return false
			}
	}
	//MARK: - DarkStyleAlertView
	override open func AlertViewStyle() -> GenericStyle.AlertViewAppearanceProxy {
		if let override = _AlertView { return override }
			return DarkStyleAlertViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAlertViewAppearanceProxy: GenericStyle.AlertViewAppearanceProxy {
	}
	//MARK: - DarkStyleAttachment
	override open func AttachmentStyle() -> GenericStyle.AttachmentAppearanceProxy {
		if let override = _Attachment { return override }
			return DarkStyleAttachmentAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAttachmentAppearanceProxy: GenericStyle.AttachmentAppearanceProxy {

		//MARK: progressBarColor 
		override open func progressBarColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _progressBarColor { return override }
			return mainProxy().EmphasisColor.primary.normalProperty(traitCollection)
			}
	}
	//MARK: - DarkStyleAttributedLabel
	override open func AttributedLabelStyle() -> GenericStyle.AttributedLabelAppearanceProxy {
		if let override = _AttributedLabel { return override }
			return DarkStyleAttributedLabelAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAttributedLabelAppearanceProxy: GenericStyle.AttributedLabelAppearanceProxy {
	}
	//MARK: - DarkStyleAttributedRender
	override open func AttributedRenderStyle() -> GenericStyle.AttributedRenderAppearanceProxy {
		if let override = _AttributedRender { return override }
			return DarkStyleAttributedRenderAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy {

		//MARK: - DarkStylefontAttributedRender
		override open func fontStyle() -> GenericStyle.AttributedRenderAppearanceProxy.fontAppearanceProxy {
			if let override = _font { return override }
				return DarkStylefontAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylefontAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.fontAppearanceProxy {
		}


		//MARK: - DarkStylelinkAttributesTextColorAttributedRender
		override open func linkAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.linkAttributesTextColorAppearanceProxy {
			if let override = _linkAttributesTextColor { return override }
				return DarkStylelinkAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelinkAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.linkAttributesTextColorAppearanceProxy {
		}


		//MARK: - DarkStylementionAttributesTextColorAttributedRender
		override open func mentionAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.mentionAttributesTextColorAppearanceProxy {
			if let override = _mentionAttributesTextColor { return override }
				return DarkStylementionAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylementionAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.mentionAttributesTextColorAppearanceProxy {
		}


		//MARK: - DarkStylenameAttributesTextColorAttributedRender
		override open func nameAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.nameAttributesTextColorAppearanceProxy {
			if let override = _nameAttributesTextColor { return override }
				return DarkStylenameAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylenameAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.nameAttributesTextColorAppearanceProxy {
		}


		//MARK: - DarkStyletextColorAttributedRender
		override open func textColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return DarkStyletextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.textColorAppearanceProxy {
		}


		//MARK: - DarkStyletypeDetectedAttributesTextColorAttributedRender
		override open func typeDetectedAttributesTextColorStyle() -> GenericStyle.AttributedRenderAppearanceProxy.typeDetectedAttributesTextColorAppearanceProxy {
			if let override = _typeDetectedAttributesTextColor { return override }
				return DarkStyletypeDetectedAttributesTextColorAttributedRenderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletypeDetectedAttributesTextColorAttributedRenderAppearanceProxy: GenericStyle.AttributedRenderAppearanceProxy.typeDetectedAttributesTextColorAppearanceProxy {
		}

	}
	//MARK: - DarkStyleAvatarView
	override open func AvatarViewStyle() -> GenericStyle.AvatarViewAppearanceProxy {
		if let override = _AvatarView { return override }
			return DarkStyleAvatarViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleAvatarViewAppearanceProxy: GenericStyle.AvatarViewAppearanceProxy {
	}
	//MARK: - DarkStyleBadgeView
	override open func BadgeViewStyle() -> GenericStyle.BadgeViewAppearanceProxy {
		if let override = _BadgeView { return override }
			return DarkStyleBadgeViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleBadgeViewAppearanceProxy: GenericStyle.BadgeViewAppearanceProxy {

		//MARK: showsCountWhenCountOneAndIcon 
		override open func showsCountWhenCountOneAndIconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _showsCountWhenCountOneAndIcon { return override }
			return true
			}

		//MARK: - DarkStyletextOffsetBadgeView
		override open func textOffsetStyle() -> GenericStyle.BadgeViewAppearanceProxy.textOffsetAppearanceProxy {
			if let override = _textOffset { return override }
				return DarkStyletextOffsetBadgeViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextOffsetBadgeViewAppearanceProxy: GenericStyle.BadgeViewAppearanceProxy.textOffsetAppearanceProxy {
		}

	}
	//MARK: - DarkStyleBlurrableView
	override open func BlurrableViewStyle() -> GenericStyle.BlurrableViewAppearanceProxy {
		if let override = _BlurrableView { return override }
			return DarkStyleBlurrableViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleBlurrableViewAppearanceProxy: GenericStyle.BlurrableViewAppearanceProxy {
	}
	//MARK: - DarkStyleBounceLayer
	override open func BounceLayerStyle() -> GenericStyle.BounceLayerAppearanceProxy {
		if let override = _BounceLayer { return override }
			return DarkStyleBounceLayerAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleBounceLayerAppearanceProxy: GenericStyle.BounceLayerAppearanceProxy {
	}
	//MARK: - DarkStyleBubbleView
	override open func BubbleViewStyle() -> GenericStyle.BubbleViewAppearanceProxy {
		if let override = _BubbleView { return override }
			return DarkStyleBubbleViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleBubbleViewAppearanceProxy: GenericStyle.BubbleViewAppearanceProxy {

		//MARK: - DarkStylebackgroundColorForResizableBubbleView
		override open func backgroundColorForResizableStyle() -> GenericStyle.BubbleViewAppearanceProxy.backgroundColorForResizableAppearanceProxy {
			if let override = _backgroundColorForResizable { return override }
				return DarkStylebackgroundColorForResizableBubbleViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebackgroundColorForResizableBubbleViewAppearanceProxy: GenericStyle.BubbleViewAppearanceProxy.backgroundColorForResizableAppearanceProxy {
		}

	}
	//MARK: - DarkStyleButton
	override open func ButtonStyle() -> GenericStyle.ButtonAppearanceProxy {
		if let override = _Button { return override }
			return DarkStyleButtonAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy {

		//MARK: circular 
		public var _circular: Bool?
		open func circularProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _circular { return override }
			return false
			}
		public var circular: Bool {
			get { return self.circularProperty() }
			set { _circular = newValue }
		}

		//MARK: - DarkStylecontentEdgeInsetsButton
		override open func contentEdgeInsetsStyle() -> GenericStyle.ButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {
			if let override = _contentEdgeInsets { return override }
				return DarkStylecontentEdgeInsetsButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecontentEdgeInsetsButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.contentEdgeInsetsAppearanceProxy {

			//MARK: icon 
			override open func iconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _icon { return override }
					return UIEdgeInsets(top: 0.0, left: 0.0, bottom: 0.0, right: 0.0)
				}

			//MARK: text 
			override open func textProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
				if let override = _text { return override }
					return UIEdgeInsets(top: 0.0, left: 20.0, bottom: 0.0, right: 20.0)
				}
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(4.0)
			}

		//MARK: font 
		override open func fontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _font { return override }
			return mainProxy().Typography.textStyles.subheadlineProperty(traitCollection)
			}

		//MARK: height 
		override open func heightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _height { return override }
			return CGFloat(32.0)
			}

		//MARK: marginImageText 
		override open func marginImageTextProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _marginImageText { return override }
			return CGFloat(10.0)
			}

		//MARK: percentageBoundingBoxIcon 
		override open func percentageBoundingBoxIconProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _percentageBoundingBoxIcon { return override }
			return mainProxy().Metric.percentageBoundingBoxIconProperty(traitCollection)
			}

		//MARK: rounded 
		override open func roundedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _rounded { return override }
			return false
			}

		//MARK: - DarkStylewidthButton
		override open func widthStyle() -> GenericStyle.ButtonAppearanceProxy.widthAppearanceProxy {
			if let override = _width { return override }
				return DarkStylewidthButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylewidthButtonAppearanceProxy: GenericStyle.ButtonAppearanceProxy.widthAppearanceProxy {

			//MARK: max 
			override open func maxProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _max { return override }
					return CGFloat(280.0)
				}

			//MARK: min 
			override open func minProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _min { return override }
					return CGFloat(96.0)
				}
		}

	}
	//MARK: - DarkStyleCalloutView
	override open func CalloutViewStyle() -> GenericStyle.CalloutViewAppearanceProxy {
		if let override = _CalloutView { return override }
			return DarkStyleCalloutViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy {

		//MARK: - DarkStylearrowOffsetCalloutView
		override open func arrowOffsetStyle() -> GenericStyle.CalloutViewAppearanceProxy.arrowOffsetAppearanceProxy {
			if let override = _arrowOffset { return override }
				return DarkStylearrowOffsetCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylearrowOffsetCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.arrowOffsetAppearanceProxy {
		}


		//MARK: - DarkStylearrowSizeCalloutView
		override open func arrowSizeStyle() -> GenericStyle.CalloutViewAppearanceProxy.arrowSizeAppearanceProxy {
			if let override = _arrowSize { return override }
				return DarkStylearrowSizeCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylearrowSizeCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.arrowSizeAppearanceProxy {
		}


		//MARK: - DarkStyledurationCalloutView
		override open func durationStyle() -> GenericStyle.CalloutViewAppearanceProxy.durationAppearanceProxy {
			if let override = _duration { return override }
				return DarkStyledurationCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledurationCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.durationAppearanceProxy {
		}


		//MARK: - DarkStyleedgeMarginCalloutView
		override open func edgeMarginStyle() -> GenericStyle.CalloutViewAppearanceProxy.edgeMarginAppearanceProxy {
			if let override = _edgeMargin { return override }
				return DarkStyleedgeMarginCalloutViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleedgeMarginCalloutViewAppearanceProxy: GenericStyle.CalloutViewAppearanceProxy.edgeMarginAppearanceProxy {
		}

	}
	//MARK: - DarkStyleCircularButton
	override open func CircularButtonStyle() -> GenericStyle.CircularButtonAppearanceProxy {
		if let override = _CircularButton { return override }
			return DarkStyleCircularButtonAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy {

		//MARK: - DarkStylebackgroundColorCircularButton
		override open func backgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return DarkStylebackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleborderColorCircularButton
		override open func borderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return DarkStyleborderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}
		}


		//MARK: - DarkStyleborderWidthCircularButton
		override open func borderWidthStyle() -> GenericStyle.CircularButtonAppearanceProxy.borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return DarkStyleborderWidthCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderWidthCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.borderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(1.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(1.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(1.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(1.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(1.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(1.0)
				}
		}


		//MARK: - DarkStylecolorCircularButton
		override open func colorStyle() -> GenericStyle.CircularButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return DarkStylecolorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecolorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.gray.g02Property(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBackgroundColorCircularButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return DarkStyledestructiveBackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderColorCircularButton
		override open func destructiveBorderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return DarkStyledestructiveBorderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderWidthCircularButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return DarkStyledestructiveBorderWidthCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderWidthCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyledestructiveColorCircularButton
		override open func destructiveColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return DarkStyledestructiveColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}
		}


		//MARK: fixedAspectRatio 
		override open func fixedAspectRatioProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _fixedAspectRatio { return override }
			return true
			}

		//MARK: - DarkStyleprimaryBackgroundColorCircularButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return DarkStyleprimaryBackgroundColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBackgroundColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g08Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b04Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderColorCircularButton
		override open func primaryBorderColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return DarkStyleprimaryBorderColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderWidthCircularButton
		override open func primaryBorderWidthStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return DarkStyleprimaryBorderWidthCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderWidthCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyleprimaryColorCircularButton
		override open func primaryColorStyle() -> GenericStyle.CircularButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return DarkStyleprimaryColorCircularButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryColorCircularButtonAppearanceProxy: GenericStyle.CircularButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.white.normalProperty(traitCollection)
				}
		}


		//MARK: rounded 
		override open func roundedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _rounded { return override }
			return true
			}
	}
	//MARK: - DarkStyleColor
	override open func ColorStyle() -> GenericStyle.ColorAppearanceProxy {
		if let override = _Color { return override }
			return DarkStyleColorAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleColorAppearanceProxy: GenericStyle.ColorAppearanceProxy {

		//MARK: - DarkStyleblackColor
		override open func blackStyle() -> GenericStyle.ColorAppearanceProxy.blackAppearanceProxy {
			if let override = _black { return override }
				return DarkStyleblackColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleblackColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.blackAppearanceProxy {
		}


		//MARK: - DarkStylebrandColor
		override open func brandStyle() -> GenericStyle.ColorAppearanceProxy.brandAppearanceProxy {
			if let override = _brand { return override }
				return DarkStylebrandColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebrandColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.brandAppearanceProxy {
		}


		//MARK: - DarkStylegrayColor
		override open func grayStyle() -> GenericStyle.ColorAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return DarkStylegrayColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegrayColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - DarkStylegreenColor
		override open func greenStyle() -> GenericStyle.ColorAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return DarkStylegreenColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegreenColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - DarkStylemagentaColor
		override open func magentaStyle() -> GenericStyle.ColorAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return DarkStylemagentaColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylemagentaColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - DarkStyleorangeColor
		override open func orangeStyle() -> GenericStyle.ColorAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return DarkStyleorangeColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleorangeColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - DarkStylepinkColor
		override open func pinkStyle() -> GenericStyle.ColorAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return DarkStylepinkColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepinkColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - DarkStyleredColor
		override open func redStyle() -> GenericStyle.ColorAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return DarkStyleredColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleredColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - DarkStylewhiteColor
		override open func whiteStyle() -> GenericStyle.ColorAppearanceProxy.whiteAppearanceProxy {
			if let override = _white { return override }
				return DarkStylewhiteColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylewhiteColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.whiteAppearanceProxy {
		}


		//MARK: - DarkStyleyellowColor
		override open func yellowStyle() -> GenericStyle.ColorAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return DarkStyleyellowColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleyellowColorAppearanceProxy: GenericStyle.ColorAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - DarkStyleColorSchemeMapping
	override open func ColorSchemeMappingStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy {
		if let override = _ColorSchemeMapping { return override }
			return DarkStyleColorSchemeMappingAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy {

		//MARK: - DarkStyleblackColorSchemeMapping
		override open func blackStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.blackAppearanceProxy {
			if let override = _black { return override }
				return DarkStyleblackColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleblackColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.blackAppearanceProxy {
		}


		//MARK: - DarkStyledarkOrangeColorSchemeMapping
		override open func darkOrangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.darkOrangeAppearanceProxy {
			if let override = _darkOrange { return override }
				return DarkStyledarkOrangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledarkOrangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.darkOrangeAppearanceProxy {
		}


		//MARK: - DarkStylegrayColorSchemeMapping
		override open func grayStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return DarkStylegrayColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegrayColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - DarkStylegreenColorSchemeMapping
		override open func greenStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return DarkStylegreenColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegreenColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - DarkStylelightGreenColorSchemeMapping
		override open func lightGreenStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.lightGreenAppearanceProxy {
			if let override = _lightGreen { return override }
				return DarkStylelightGreenColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelightGreenColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.lightGreenAppearanceProxy {
		}


		//MARK: - DarkStylemagentaColorSchemeMapping
		override open func magentaStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return DarkStylemagentaColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylemagentaColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - DarkStyleorangeColorSchemeMapping
		override open func orangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return DarkStyleorangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleorangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - DarkStylepinkColorSchemeMapping
		override open func pinkStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return DarkStylepinkColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepinkColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - DarkStylepostOrangeColorSchemeMapping
		override open func postOrangeStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.postOrangeAppearanceProxy {
			if let override = _postOrange { return override }
				return DarkStylepostOrangeColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepostOrangeColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.postOrangeAppearanceProxy {
		}


		//MARK: - DarkStyleprimaryColorSchemeMapping
		override open func primaryStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.primaryAppearanceProxy {
			if let override = _primary { return override }
				return DarkStyleprimaryColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.primaryAppearanceProxy {
		}


		//MARK: - DarkStyleredColorSchemeMapping
		override open func redStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return DarkStyleredColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleredColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - DarkStylewhiteColorSchemeMapping
		override open func whiteStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.whiteAppearanceProxy {
			if let override = _white { return override }
				return DarkStylewhiteColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylewhiteColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.whiteAppearanceProxy {
		}


		//MARK: - DarkStyleyellowColorSchemeMapping
		override open func yellowStyle() -> GenericStyle.ColorSchemeMappingAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return DarkStyleyellowColorSchemeMappingAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleyellowColorSchemeMappingAppearanceProxy: GenericStyle.ColorSchemeMappingAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - DarkStyleContentItemTableViewCell
	override open func ContentItemTableViewCellStyle() -> GenericStyle.ContentItemTableViewCellAppearanceProxy {
		if let override = _ContentItemTableViewCell { return override }
			return DarkStyleContentItemTableViewCellAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleContentItemTableViewCellAppearanceProxy: GenericStyle.ContentItemTableViewCellAppearanceProxy {

		//MARK: - DarkStylecheckmarkBorderColorContentItemTableViewCell
		override open func checkmarkBorderColorStyle() -> GenericStyle.ContentItemTableViewCellAppearanceProxy.checkmarkBorderColorAppearanceProxy {
			if let override = _checkmarkBorderColor { return override }
				return DarkStylecheckmarkBorderColorContentItemTableViewCellAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecheckmarkBorderColorContentItemTableViewCellAppearanceProxy: GenericStyle.ContentItemTableViewCellAppearanceProxy.checkmarkBorderColorAppearanceProxy {
		}

	}
	//MARK: - DarkStyleContentItemView
	override open func ContentItemViewStyle() -> GenericStyle.ContentItemViewAppearanceProxy {
		if let override = _ContentItemView { return override }
			return DarkStyleContentItemViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy {

		//MARK: - DarkStylerightActionTitleColorItemsContentItemView
		override open func rightActionTitleColorItemsStyle() -> GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleColorItemsAppearanceProxy {
			if let override = _rightActionTitleColorItems { return override }
				return DarkStylerightActionTitleColorItemsContentItemViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylerightActionTitleColorItemsContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleColorItemsAppearanceProxy {
		}


		//MARK: - DarkStylerightActionTitleEdgeInsetsContentItemView
		override open func rightActionTitleEdgeInsetsStyle() -> GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleEdgeInsetsAppearanceProxy {
			if let override = _rightActionTitleEdgeInsets { return override }
				return DarkStylerightActionTitleEdgeInsetsContentItemViewAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylerightActionTitleEdgeInsetsContentItemViewAppearanceProxy: GenericStyle.ContentItemViewAppearanceProxy.rightActionTitleEdgeInsetsAppearanceProxy {
		}

	}
	//MARK: - DarkStyleDivider
	override open func DividerStyle() -> GenericStyle.DividerAppearanceProxy {
		if let override = _Divider { return override }
			return DarkStyleDividerAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy {

		//MARK: - DarkStyleimportantTextFontDivider
		override open func importantTextFontStyle() -> GenericStyle.DividerAppearanceProxy.importantTextFontAppearanceProxy {
			if let override = _importantTextFont { return override }
				return DarkStyleimportantTextFontDividerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleimportantTextFontDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy.importantTextFontAppearanceProxy {
		}


		//MARK: - DarkStyletextFontDivider
		override open func textFontStyle() -> GenericStyle.DividerAppearanceProxy.textFontAppearanceProxy {
			if let override = _textFont { return override }
				return DarkStyletextFontDividerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextFontDividerAppearanceProxy: GenericStyle.DividerAppearanceProxy.textFontAppearanceProxy {
		}

	}
	//MARK: - DarkStyleDuration
	override open func DurationStyle() -> GenericStyle.DurationAppearanceProxy {
		if let override = _Duration { return override }
			return DarkStyleDurationAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleDurationAppearanceProxy: GenericStyle.DurationAppearanceProxy {

		//MARK: - DarkStyleintervalDuration
		override open func intervalStyle() -> GenericStyle.DurationAppearanceProxy.intervalAppearanceProxy {
			if let override = _interval { return override }
				return DarkStyleintervalDurationAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleintervalDurationAppearanceProxy: GenericStyle.DurationAppearanceProxy.intervalAppearanceProxy {
		}

	}
	//MARK: - DarkStyleElementColor
	override open func ElementColorStyle() -> GenericStyle.ElementColorAppearanceProxy {
		if let override = _ElementColor { return override }
			return DarkStyleElementColorAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleElementColorAppearanceProxy: GenericStyle.ElementColorAppearanceProxy {

		//MARK: - DarkStylepresenceColorElementColor
		override open func presenceColorStyle() -> GenericStyle.ElementColorAppearanceProxy.presenceColorAppearanceProxy {
			if let override = _presenceColor { return override }
				return DarkStylepresenceColorElementColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepresenceColorElementColorAppearanceProxy: GenericStyle.ElementColorAppearanceProxy.presenceColorAppearanceProxy {
		}

	}
	//MARK: - DarkStyleEmphasisColor
	override open func EmphasisColorStyle() -> GenericStyle.EmphasisColorAppearanceProxy {
		if let override = _EmphasisColor { return override }
			return DarkStyleEmphasisColorAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleEmphasisColorAppearanceProxy: GenericStyle.EmphasisColorAppearanceProxy {

		//MARK: - DarkStyleprimaryEmphasisColor
		override open func primaryStyle() -> GenericStyle.EmphasisColorAppearanceProxy.primaryAppearanceProxy {
			if let override = _primary { return override }
				return DarkStyleprimaryEmphasisColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryEmphasisColorAppearanceProxy: GenericStyle.EmphasisColorAppearanceProxy.primaryAppearanceProxy {
		}

	}
	//MARK: - DarkStyleEmptyListView
	override open func EmptyListViewStyle() -> GenericStyle.EmptyListViewAppearanceProxy {
		if let override = _EmptyListView { return override }
			return DarkStyleEmptyListViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleEmptyListViewAppearanceProxy: GenericStyle.EmptyListViewAppearanceProxy {
	}
	//MARK: - DarkStyleEnums
	override open func EnumsStyle() -> GenericStyle.EnumsAppearanceProxy {
		if let override = _Enums { return override }
			return DarkStyleEnumsAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleEnumsAppearanceProxy: GenericStyle.EnumsAppearanceProxy {
	}
	//MARK: - DarkStyleHeader
	override open func HeaderStyle() -> GenericStyle.HeaderAppearanceProxy {
		if let override = _Header { return override }
			return DarkStyleHeaderAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy {

		//MARK: - DarkStyleheadingFontHeader
		override open func headingFontStyle() -> GenericStyle.HeaderAppearanceProxy.headingFontAppearanceProxy {
			if let override = _headingFont { return override }
				return DarkStyleheadingFontHeaderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleheadingFontHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy.headingFontAppearanceProxy {
		}


		//MARK: - DarkStyleparagraphFontHeader
		override open func paragraphFontStyle() -> GenericStyle.HeaderAppearanceProxy.paragraphFontAppearanceProxy {
			if let override = _paragraphFont { return override }
				return DarkStyleparagraphFontHeaderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleparagraphFontHeaderAppearanceProxy: GenericStyle.HeaderAppearanceProxy.paragraphFontAppearanceProxy {
		}

	}
	//MARK: - DarkStyleIcon
	override open func IconStyle() -> GenericStyle.IconAppearanceProxy {
		if let override = _Icon { return override }
			return DarkStyleIconAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleIconAppearanceProxy: GenericStyle.IconAppearanceProxy {

		//MARK: - DarkStylesizeIcon
		override open func sizeStyle() -> GenericStyle.IconAppearanceProxy.sizeAppearanceProxy {
			if let override = _size { return override }
				return DarkStylesizeIconAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylesizeIconAppearanceProxy: GenericStyle.IconAppearanceProxy.sizeAppearanceProxy {
		}

	}
	//MARK: - DarkStyleIconButton
	override open func IconButtonStyle() -> GenericStyle.IconButtonAppearanceProxy {
		if let override = _IconButton { return override }
			return DarkStyleIconButtonAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleIconButtonAppearanceProxy: GenericStyle.IconButtonAppearanceProxy {
	}
	//MARK: - DarkStyleImageView
	override open func ImageViewStyle() -> GenericStyle.ImageViewAppearanceProxy {
		if let override = _ImageView { return override }
			return DarkStyleImageViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleImageViewAppearanceProxy: GenericStyle.ImageViewAppearanceProxy {
	}
	//MARK: - DarkStyleIndicator
	override open func IndicatorStyle() -> GenericStyle.IndicatorAppearanceProxy {
		if let override = _Indicator { return override }
			return DarkStyleIndicatorAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleIndicatorAppearanceProxy: GenericStyle.IndicatorAppearanceProxy {

		//MARK: - DarkStyledirectionIconsIndicator
		override open func directionIconsStyle() -> GenericStyle.IndicatorAppearanceProxy.directionIconsAppearanceProxy {
			if let override = _directionIcons { return override }
				return DarkStyledirectionIconsIndicatorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledirectionIconsIndicatorAppearanceProxy: GenericStyle.IndicatorAppearanceProxy.directionIconsAppearanceProxy {
		}

	}
	//MARK: - DarkStyleLabel
	override open func LabelStyle() -> GenericStyle.LabelAppearanceProxy {
		if let override = _Label { return override }
			return DarkStyleLabelAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleLabelAppearanceProxy: GenericStyle.LabelAppearanceProxy {
	}
	//MARK: - DarkStyleLoader
	override open func LoaderStyle() -> GenericStyle.LoaderAppearanceProxy {
		if let override = _Loader { return override }
			return DarkStyleLoaderAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleLoaderAppearanceProxy: GenericStyle.LoaderAppearanceProxy {

		//MARK: - DarkStylelabelFontLoader
		override open func labelFontStyle() -> GenericStyle.LoaderAppearanceProxy.labelFontAppearanceProxy {
			if let override = _labelFont { return override }
				return DarkStylelabelFontLoaderAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelabelFontLoaderAppearanceProxy: GenericStyle.LoaderAppearanceProxy.labelFontAppearanceProxy {
		}

	}
	//MARK: - DarkStyleMetric
	override open func MetricStyle() -> GenericStyle.MetricAppearanceProxy {
		if let override = _Metric { return override }
			return DarkStyleMetricAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleMetricAppearanceProxy: GenericStyle.MetricAppearanceProxy {
	}
	//MARK: - DarkStyleNaturalColor
	override open func NaturalColorStyle() -> GenericStyle.NaturalColorAppearanceProxy {
		if let override = _NaturalColor { return override }
			return DarkStyleNaturalColorAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy {

		//MARK: - DarkStyledarkOrangeNaturalColor
		override open func darkOrangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.darkOrangeAppearanceProxy {
			if let override = _darkOrange { return override }
				return DarkStyledarkOrangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledarkOrangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.darkOrangeAppearanceProxy {
		}


		//MARK: - DarkStylegrayNaturalColor
		override open func grayStyle() -> GenericStyle.NaturalColorAppearanceProxy.grayAppearanceProxy {
			if let override = _gray { return override }
				return DarkStylegrayNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegrayNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.grayAppearanceProxy {
		}


		//MARK: - DarkStylegreenNaturalColor
		override open func greenStyle() -> GenericStyle.NaturalColorAppearanceProxy.greenAppearanceProxy {
			if let override = _green { return override }
				return DarkStylegreenNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylegreenNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.greenAppearanceProxy {
		}


		//MARK: - DarkStylelightGreenNaturalColor
		override open func lightGreenStyle() -> GenericStyle.NaturalColorAppearanceProxy.lightGreenAppearanceProxy {
			if let override = _lightGreen { return override }
				return DarkStylelightGreenNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelightGreenNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.lightGreenAppearanceProxy {
		}


		//MARK: - DarkStylemagentaNaturalColor
		override open func magentaStyle() -> GenericStyle.NaturalColorAppearanceProxy.magentaAppearanceProxy {
			if let override = _magenta { return override }
				return DarkStylemagentaNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylemagentaNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.magentaAppearanceProxy {
		}


		//MARK: - DarkStyleorangeNaturalColor
		override open func orangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.orangeAppearanceProxy {
			if let override = _orange { return override }
				return DarkStyleorangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleorangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.orangeAppearanceProxy {
		}


		//MARK: - DarkStylepinkNaturalColor
		override open func pinkStyle() -> GenericStyle.NaturalColorAppearanceProxy.pinkAppearanceProxy {
			if let override = _pink { return override }
				return DarkStylepinkNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepinkNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.pinkAppearanceProxy {
		}


		//MARK: - DarkStylepostOrangeNaturalColor
		override open func postOrangeStyle() -> GenericStyle.NaturalColorAppearanceProxy.postOrangeAppearanceProxy {
			if let override = _postOrange { return override }
				return DarkStylepostOrangeNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepostOrangeNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.postOrangeAppearanceProxy {
		}


		//MARK: - DarkStyleredNaturalColor
		override open func redStyle() -> GenericStyle.NaturalColorAppearanceProxy.redAppearanceProxy {
			if let override = _red { return override }
				return DarkStyleredNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleredNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.redAppearanceProxy {
		}


		//MARK: - DarkStyleyellowNaturalColor
		override open func yellowStyle() -> GenericStyle.NaturalColorAppearanceProxy.yellowAppearanceProxy {
			if let override = _yellow { return override }
				return DarkStyleyellowNaturalColorAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleyellowNaturalColorAppearanceProxy: GenericStyle.NaturalColorAppearanceProxy.yellowAppearanceProxy {
		}

	}
	//MARK: - DarkStyleNavigationBar
	override open func NavigationBarStyle() -> GenericStyle.NavigationBarAppearanceProxy {
		if let override = _NavigationBar { return override }
			return DarkStyleNavigationBarAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy {

		//MARK: - DarkStylebarButtonItemsIconSizeNavigationBar
		override open func barButtonItemsIconSizeStyle() -> GenericStyle.NavigationBarAppearanceProxy.barButtonItemsIconSizeAppearanceProxy {
			if let override = _barButtonItemsIconSize { return override }
				return DarkStylebarButtonItemsIconSizeNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebarButtonItemsIconSizeNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.barButtonItemsIconSizeAppearanceProxy {
		}


		//MARK: - DarkStylebarButtonItemsImageSizeNavigationBar
		override open func barButtonItemsImageSizeStyle() -> GenericStyle.NavigationBarAppearanceProxy.barButtonItemsImageSizeAppearanceProxy {
			if let override = _barButtonItemsImageSize { return override }
				return DarkStylebarButtonItemsImageSizeNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebarButtonItemsImageSizeNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.barButtonItemsImageSizeAppearanceProxy {
		}


		//MARK: - DarkStyletitleColorBarItemsNavigationBar
		override open func titleColorBarItemsStyle() -> GenericStyle.NavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
			if let override = _titleColorBarItems { return override }
				return DarkStyletitleColorBarItemsNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleColorBarItemsNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
		}


		//MARK: - DarkStyletitleHighlightedColorBarItemsNavigationBar
		override open func titleHighlightedColorBarItemsStyle() -> GenericStyle.NavigationBarAppearanceProxy.titleHighlightedColorBarItemsAppearanceProxy {
			if let override = _titleHighlightedColorBarItems { return override }
				return DarkStyletitleHighlightedColorBarItemsNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleHighlightedColorBarItemsNavigationBarAppearanceProxy: GenericStyle.NavigationBarAppearanceProxy.titleHighlightedColorBarItemsAppearanceProxy {
		}

	}
	//MARK: - DarkStyleOptions
	override open func OptionsStyle() -> GenericStyle.OptionsAppearanceProxy {
		if let override = _Options { return override }
			return DarkStyleOptionsAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleOptionsAppearanceProxy: GenericStyle.OptionsAppearanceProxy {
	}
	//MARK: - DarkStylePageControl
	override open func PageControlStyle() -> GenericStyle.PageControlAppearanceProxy {
		if let override = _PageControl { return override }
			return DarkStylePageControlAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStylePageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy {

		//MARK: - DarkStylediameterPageControl
		override open func diameterStyle() -> GenericStyle.PageControlAppearanceProxy.diameterAppearanceProxy {
			if let override = _diameter { return override }
				return DarkStylediameterPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylediameterPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.diameterAppearanceProxy {
		}


		//MARK: - DarkStyleindicatorColorPageControl
		override open func indicatorColorStyle() -> GenericStyle.PageControlAppearanceProxy.indicatorColorAppearanceProxy {
			if let override = _indicatorColor { return override }
				return DarkStyleindicatorColorPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleindicatorColorPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.indicatorColorAppearanceProxy {
		}


		//MARK: - DarkStylepaddingPageControl
		override open func paddingStyle() -> GenericStyle.PageControlAppearanceProxy.paddingAppearanceProxy {
			if let override = _padding { return override }
				return DarkStylepaddingPageControlAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylepaddingPageControlAppearanceProxy: GenericStyle.PageControlAppearanceProxy.paddingAppearanceProxy {
		}

	}
	//MARK: - DarkStylePartitionedCollectionViewLayout
	override open func PartitionedCollectionViewLayoutStyle() -> GenericStyle.PartitionedCollectionViewLayoutAppearanceProxy {
		if let override = _PartitionedCollectionViewLayout { return override }
			return DarkStylePartitionedCollectionViewLayoutAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStylePartitionedCollectionViewLayoutAppearanceProxy: GenericStyle.PartitionedCollectionViewLayoutAppearanceProxy {
	}
	//MARK: - DarkStylePinAvatarView
	override open func PinAvatarViewStyle() -> GenericStyle.PinAvatarViewAppearanceProxy {
		if let override = _PinAvatarView { return override }
			return DarkStylePinAvatarViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStylePinAvatarViewAppearanceProxy: GenericStyle.PinAvatarViewAppearanceProxy {
	}
	//MARK: - DarkStylePresence
	override open func PresenceStyle() -> GenericStyle.PresenceAppearanceProxy {
		if let override = _Presence { return override }
			return DarkStylePresenceAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStylePresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy {

		//MARK: - DarkStyleiconPresence
		override open func iconStyle() -> GenericStyle.PresenceAppearanceProxy.iconAppearanceProxy {
			if let override = _icon { return override }
				return DarkStyleiconPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleiconPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.iconAppearanceProxy {
		}


		//MARK: - DarkStyleiconColorPresence
		override open func iconColorStyle() -> GenericStyle.PresenceAppearanceProxy.iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return DarkStyleiconColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleiconColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.iconColorAppearanceProxy {
		}


		//MARK: - DarkStyleinnerColorPresence
		override open func innerColorStyle() -> GenericStyle.PresenceAppearanceProxy.innerColorAppearanceProxy {
			if let override = _innerColor { return override }
				return DarkStyleinnerColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleinnerColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.innerColorAppearanceProxy {
		}


		//MARK: - DarkStyleouterColorPresence
		override open func outerColorStyle() -> GenericStyle.PresenceAppearanceProxy.outerColorAppearanceProxy {
			if let override = _outerColor { return override }
				return DarkStyleouterColorPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleouterColorPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.outerColorAppearanceProxy {
		}


		//MARK: - DarkStylestrokeWidthPresence
		override open func strokeWidthStyle() -> GenericStyle.PresenceAppearanceProxy.strokeWidthAppearanceProxy {
			if let override = _strokeWidth { return override }
				return DarkStylestrokeWidthPresenceAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylestrokeWidthPresenceAppearanceProxy: GenericStyle.PresenceAppearanceProxy.strokeWidthAppearanceProxy {
		}

	}
	//MARK: - DarkStylePresenceStatusView
	override open func PresenceStatusViewStyle() -> GenericStyle.PresenceStatusViewAppearanceProxy {
		if let override = _PresenceStatusView { return override }
			return DarkStylePresenceStatusViewAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStylePresenceStatusViewAppearanceProxy: GenericStyle.PresenceStatusViewAppearanceProxy {
	}
	//MARK: - DarkStyleSearchBar
	override open func SearchBarStyle() -> GenericStyle.SearchBarAppearanceProxy {
		if let override = _SearchBar { return override }
			return DarkStyleSearchBarAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleSearchBarAppearanceProxy: GenericStyle.SearchBarAppearanceProxy {
	}
	//MARK: - DarkStyleSwipeTableViewCell
	override open func SwipeTableViewCellStyle() -> GenericStyle.SwipeTableViewCellAppearanceProxy {
		if let override = _SwipeTableViewCell { return override }
			return DarkStyleSwipeTableViewCellAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleSwipeTableViewCellAppearanceProxy: GenericStyle.SwipeTableViewCellAppearanceProxy {
	}
	//MARK: - DarkStyleTabBarController
	override open func TabBarControllerStyle() -> GenericStyle.TabBarControllerAppearanceProxy {
		if let override = _TabBarController { return override }
			return DarkStyleTabBarControllerAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy {

		//MARK: - DarkStyleiconColorTabBarController
		override open func iconColorStyle() -> GenericStyle.TabBarControllerAppearanceProxy.iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return DarkStyleiconColorTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleiconColorTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.iconColorAppearanceProxy {
		}


		//MARK: - DarkStyleimageInsetsTabBarController
		override open func imageInsetsStyle() -> GenericStyle.TabBarControllerAppearanceProxy.imageInsetsAppearanceProxy {
			if let override = _imageInsets { return override }
				return DarkStyleimageInsetsTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleimageInsetsTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.imageInsetsAppearanceProxy {
		}


		//MARK: - DarkStyletextColorTabBarController
		override open func textColorStyle() -> GenericStyle.TabBarControllerAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return DarkStyletextColorTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextColorTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.textColorAppearanceProxy {
		}


		//MARK: - DarkStyletextFontTabBarController
		override open func textFontStyle() -> GenericStyle.TabBarControllerAppearanceProxy.textFontAppearanceProxy {
			if let override = _textFont { return override }
				return DarkStyletextFontTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextFontTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.textFontAppearanceProxy {
		}


		//MARK: - DarkStyletitleVerticalOffsetTabBarController
		override open func titleVerticalOffsetStyle() -> GenericStyle.TabBarControllerAppearanceProxy.titleVerticalOffsetAppearanceProxy {
			if let override = _titleVerticalOffset { return override }
				return DarkStyletitleVerticalOffsetTabBarControllerAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleVerticalOffsetTabBarControllerAppearanceProxy: GenericStyle.TabBarControllerAppearanceProxy.titleVerticalOffsetAppearanceProxy {
		}

	}
	//MARK: - DarkStyleTextButton
	override open func TextButtonStyle() -> GenericStyle.TextButtonAppearanceProxy {
		if let override = _TextButton { return override }
			return DarkStyleTextButtonAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy {

		//MARK: - DarkStylebackgroundColorTextButton
		override open func backgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return DarkStylebackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylebackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleborderColorTextButton
		override open func borderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return DarkStyleborderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.borderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleborderWidthTextButton
		override open func borderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.borderWidthAppearanceProxy {
			if let override = _borderWidth { return override }
				return DarkStyleborderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleborderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.borderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStylecolorTextButton
		override open func colorStyle() -> GenericStyle.TextButtonAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return DarkStylecolorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylecolorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.colorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}


		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: - DarkStyledestructiveBackgroundColorTextButton
		override open func destructiveBackgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {
			if let override = _destructiveBackgroundColor { return override }
				return DarkStyledestructiveBackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderColorTextButton
		override open func destructiveBorderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {
			if let override = _destructiveBorderColor { return override }
				return DarkStyledestructiveBorderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyledestructiveBorderWidthTextButton
		override open func destructiveBorderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {
			if let override = _destructiveBorderWidth { return override }
				return DarkStyledestructiveBorderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveBorderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyledestructiveColorTextButton
		override open func destructiveColorStyle() -> GenericStyle.TextButtonAppearanceProxy.destructiveColorAppearanceProxy {
			if let override = _destructiveColor { return override }
				return DarkStyledestructiveColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyledestructiveColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.destructiveColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g06Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.red.darkProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.red.normalProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBackgroundColorTextButton
		override open func primaryBackgroundColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {
			if let override = _primaryBackgroundColor { return override }
				return DarkStyleprimaryBackgroundColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBackgroundColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBackgroundColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderColorTextButton
		override open func primaryBorderColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBorderColorAppearanceProxy {
			if let override = _primaryBorderColor { return override }
				return DarkStyleprimaryBorderColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBorderColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.transparentProperty(traitCollection)
				}
		}


		//MARK: - DarkStyleprimaryBorderWidthTextButton
		override open func primaryBorderWidthStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {
			if let override = _primaryBorderWidth { return override }
				return DarkStyleprimaryBorderWidthTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryBorderWidthTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryBorderWidthAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _active { return override }
					return CGFloat(0.0)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _activeDisabled { return override }
					return CGFloat(0.0)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _disabled { return override }
					return CGFloat(0.0)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _focus { return override }
					return CGFloat(0.0)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _hover { return override }
					return CGFloat(0.0)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _normal { return override }
					return CGFloat(0.0)
				}
		}


		//MARK: - DarkStyleprimaryColorTextButton
		override open func primaryColorStyle() -> GenericStyle.TextButtonAppearanceProxy.primaryColorAppearanceProxy {
			if let override = _primaryColor { return override }
				return DarkStyleprimaryColorTextButtonAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyleprimaryColorTextButtonAppearanceProxy: GenericStyle.TextButtonAppearanceProxy.primaryColorAppearanceProxy {

			//MARK: active 
			override open func activeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _active { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: activeDisabled 
			override open func activeDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _activeDisabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Color.gray.g04Property(traitCollection)
				}

			//MARK: focus 
			override open func focusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _focus { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Color.brand.b02Property(traitCollection)
				}

			//MARK: normal 
			override open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.brand.normalProperty(traitCollection)
				}
		}

	}
	//MARK: - DarkStyleTextField
	override open func TextFieldStyle() -> GenericStyle.TextFieldAppearanceProxy {
		if let override = _TextField { return override }
			return DarkStyleTextFieldAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTextFieldAppearanceProxy: GenericStyle.TextFieldAppearanceProxy {
	}
	//MARK: - DarkStyleTimingFunctions
	override open func TimingFunctionsStyle() -> GenericStyle.TimingFunctionsAppearanceProxy {
		if let override = _TimingFunctions { return override }
			return DarkStyleTimingFunctionsAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTimingFunctionsAppearanceProxy: GenericStyle.TimingFunctionsAppearanceProxy {
	}
	//MARK: - DarkStyleTitleNavigationBar
	override open func TitleNavigationBarStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy {
		if let override = _TitleNavigationBar { return override }
			return DarkStyleTitleNavigationBarAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy {

		//MARK: - DarkStyletitleActionColorTitleNavigationBar
		override open func titleActionColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionColorAppearanceProxy {
			if let override = _titleActionColor { return override }
				return DarkStyletitleActionColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleActionColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionColorAppearanceProxy {
		}


		//MARK: - DarkStyletitleActionIndicatorBackgroundColorTitleNavigationBar
		override open func titleActionIndicatorBackgroundColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorBackgroundColorAppearanceProxy {
			if let override = _titleActionIndicatorBackgroundColor { return override }
				return DarkStyletitleActionIndicatorBackgroundColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleActionIndicatorBackgroundColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorBackgroundColorAppearanceProxy {
		}


		//MARK: - DarkStyletitleActionIndicatorColorTitleNavigationBar
		override open func titleActionIndicatorColorStyle() -> GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorColorAppearanceProxy {
			if let override = _titleActionIndicatorColor { return override }
				return DarkStyletitleActionIndicatorColorTitleNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleActionIndicatorColorTitleNavigationBarAppearanceProxy: GenericStyle.TitleNavigationBarAppearanceProxy.titleActionIndicatorColorAppearanceProxy {
		}

	}
	//MARK: - DarkStyleToolbar
	override open func ToolbarStyle() -> GenericStyle.ToolbarAppearanceProxy {
		if let override = _Toolbar { return override }
			return DarkStyleToolbarAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleToolbarAppearanceProxy: GenericStyle.ToolbarAppearanceProxy {
	}
	//MARK: - DarkStyleTransparentNavigationBar
	override open func TransparentNavigationBarStyle() -> GenericStyle.TransparentNavigationBarAppearanceProxy {
		if let override = _TransparentNavigationBar { return override }
			return DarkStyleTransparentNavigationBarAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTransparentNavigationBarAppearanceProxy: GenericStyle.TransparentNavigationBarAppearanceProxy {

		//MARK: - DarkStyletitleColorBarItemsTransparentNavigationBar
		override open func titleColorBarItemsStyle() -> GenericStyle.TransparentNavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
			if let override = _titleColorBarItems { return override }
				return DarkStyletitleColorBarItemsTransparentNavigationBarAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletitleColorBarItemsTransparentNavigationBarAppearanceProxy: GenericStyle.TransparentNavigationBarAppearanceProxy.titleColorBarItemsAppearanceProxy {
		}

	}
	//MARK: - DarkStyleTypography
	override open func TypographyStyle() -> GenericStyle.TypographyAppearanceProxy {
		if let override = _Typography { return override }
			return DarkStyleTypographyAppearanceProxy(proxy: { return DarkStyle.shared() })
		}
	open class DarkStyleTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy {

		//MARK: - DarkStylelargeTypography
		override open func largeStyle() -> GenericStyle.TypographyAppearanceProxy.largeAppearanceProxy {
			if let override = _large { return override }
				return DarkStylelargeTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelargeTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.largeAppearanceProxy {
		}


		//MARK: - DarkStylelargerTypography
		override open func largerStyle() -> GenericStyle.TypographyAppearanceProxy.largerAppearanceProxy {
			if let override = _larger { return override }
				return DarkStylelargerTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylelargerTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.largerAppearanceProxy {
		}


		//MARK: - DarkStylemediumTypography
		override open func mediumStyle() -> GenericStyle.TypographyAppearanceProxy.mediumAppearanceProxy {
			if let override = _medium { return override }
				return DarkStylemediumTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylemediumTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.mediumAppearanceProxy {
		}


		//MARK: - DarkStylesmallTypography
		override open func smallStyle() -> GenericStyle.TypographyAppearanceProxy.smallAppearanceProxy {
			if let override = _small { return override }
				return DarkStylesmallTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylesmallTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.smallAppearanceProxy {
		}


		//MARK: - DarkStylesmallerTypography
		override open func smallerStyle() -> GenericStyle.TypographyAppearanceProxy.smallerAppearanceProxy {
			if let override = _smaller { return override }
				return DarkStylesmallerTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStylesmallerTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.smallerAppearanceProxy {
		}


		//MARK: - DarkStyletextStylesTypography
		override open func textStylesStyle() -> GenericStyle.TypographyAppearanceProxy.textStylesAppearanceProxy {
			if let override = _textStyles { return override }
				return DarkStyletextStylesTypographyAppearanceProxy(proxy: mainProxy)
			}
		open class DarkStyletextStylesTypographyAppearanceProxy: GenericStyle.TypographyAppearanceProxy.textStylesAppearanceProxy {
		}

	}

}